#include<bits/stdc++.h>
using namespace std;
int n,m;
const int maxN = 350;//re,推测是数组越界 
char g[maxN][maxN];
bool vis[maxN][maxN];
int bx, by, ex, ey;
int door[30][4];
struct Node{
	int x, y, cnt;
};
int step[4][2] = {{1,0}, {0,1}, {-1,0},{0,-1}};
Node goDoor(int x, int y, int cnt){
	Node cur;
	cur.cnt = cnt;
	int tmp = g[x][y] - 'A';
	if(door[tmp][0]==x&&door[tmp][1]==y){//不能只判x不判y。。 
		cur.x = door[tmp][2];
		cur.y = door[tmp][3];
	}
	else{
		cur.x = door[tmp][0];
		cur.y = door[tmp][1];
	}
	return cur;
}
int main(){
	cin>>n>>m;
	memset(g, '#', sizeof(g));
	memset(vis, false, sizeof(vis));
	memset(door, -1, sizeof(door));
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			cin>>g[i][j];
			if(g[i][j]=='='){
				ex = i,ey = j;
			}
			else if(g[i][j]=='@'){
				bx = i, by = j;
			}
			else if(g[i][j]>='A'&&g[i][j]<='Z'){//门是成对出现 ,只能是men 
				int id = g[i][j]-'A';
				if(door[id][0]==-1){
					door[id][0] = i;
					door[id][1] = j;
				}
				else{
					door[id][2] = i;
					door[id][3] = j;
				}
			}
		}
	}
	//bfs
	Node tmp;
	tmp.x = bx, tmp.y = by, tmp.cnt = 0;
	queue<Node>q;
	q.push(tmp);
	vis[tmp.x][tmp.y]=true;
	while(!q.empty()){
		Node cur = q.front();//有错解 
		q.pop();
//		cout<<"x:"<<cur.x<<" y:"<<cur.y<<" cnt:"<<cur.cnt<<" g:"<<g[cur.x][cur.y]<<endl;
		if(cur.x==ex&&cur.y==ey){//边界 
			cout<<cur.cnt<<endl;
			return 0; 
		}
		for(int i=0;i<4;i++){
			int x1 = cur.x+step[i][0];
			int y1 = cur.y+step[i][1];
			if(g[x1][y1]!='#'&&!vis[x1][y1]){//不是障碍物且没访问过 
				vis[x1][y1]=true;
				if(g[x1][y1]>='A'&&g[x1][y1]<='Z'){//是门 
					Node nextDoor = goDoor(x1,y1, cur.cnt+1);
//					vis[nextDoor.x][nextDoor.y] = true;
					q.push(nextDoor);
				}
				else{
					tmp.x = x1;
					tmp.y = y1;
					tmp.cnt = cur.cnt+1;
					q.push(tmp);
				}
			}
		}
	}
	
	
}
/*

5 6
###=##
#.W.##
#.####
#.@W##
######

5 6
###=##
#.W.##
#.####
#.@W##
######

5 6
###=##
#.AW##
#.####
#W@A##
######

5 6
###=##
#...##
#.####
#.@W##
###W##

5 6
###=##
#...##
###W##
#...##
#@#W##

10 200
########################################################################################################################################################################################################
=.B####.#.##....#..###.#.#.#######Y#.#.##.####K..I###....####.#####.####.#.#.########.#...#F#####.##..####......#.##.#######..##.#.#######.#..###.#F......P###..##..##..#.###..###.#.####M.#.###.##.####
####.######.D######..#.#####S.####P#...##.##.##########.##.##.####.##...#########.#.##...#..J.#..#.#.#..######.#N####.##.###.....L####.L..#..#EE#..#.#..###.####..#####..#...Q#####.#####K..#.##.####..#
#######.#.#..#.#...###..##I...#####.#####.####..##.#####.#####..#####.##..#..####.#######.....#..##.#####.#####..#...###.....#####.#..#...#.#...G#...###...##...####.#####....#.##########....#####...##
######.#.#..###..##.##.##.#########.####.#.#.#.###.#.#.###..R##.#.####.####.#.#..####..###########.###.##.#.Q###.#.##.##..####..#####.##B###..#..##..#####.###...##..########.####.#.#..###.##J.##..#..#
##X...#.##...###..########...#.#.##.###......#####.#####.#A####.##.#.##.#..###.##..#####....######..#...####..##.#H..#O...###.##..##.####.#.#.##N.#.####.########..####.##.##..###########...##X#..#..##
#####.###..###.###.#####....##.####.####.#.#..#.#..###.###..###.#.#####..###.###...###.#####.####.##.###...#.#..###.#############.##.##..###.#G##.##..######..###.###.#.####.####.###.###.#..##...##.###
###A..##..#####..#..#.###.##...#YC#.#O...##.#..........######.###..#.#.####.###..#######....##..#.###.#..#..#...##.##M..#.#..#...#.##.####.##.#S####.###.##..#.#######.######.#D######.#..#......###..##
######R..#.###.##.#.#.##.###..######.##..#.##..#####..Z###..#H.#.####.#.#.#.#ZC##...#...#.....###.#..###...#####.###..##.####..##.#.##..#####.##########.#.#..#.#...####.####...###...##...#..###.#...@#
########################################################################################################################################################################################################

*/
